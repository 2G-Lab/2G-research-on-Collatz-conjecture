const B = 11n;
const N_0 = B * 300349590371366498274306350897644656894705540951375418888212409462904980618816637884609391562156606343366613587414991432742403364477108599508076777847985432430409997645469974954351396511562662822906427792909394632918573807542401126321555360646652924021800942092447007281370480579034791333914286134117858376128833660517802576644729762142729590418150580298789179170813256914650708492062588819074838984982399844600609925278498214143565529507747742741995261833930332995480148562431897353996687690612171587836134878950365503682583450240319474004575243114424468311892540408222791018142102113232809899815900390901793328667166751387552223521186294863240692407557186324278588054209511894684914936890227355470808214644736840481035297953611378579650226738799338016026290016521084035440100993808869857665283733032391479827813476261231891498852715638055393215881380657199505590595681467654394476043012333744685056n + 4986282013594622788267509793181347021161602613918586177295290475603036910570583047483333470492154420845625408627058011104093968441263178754191563739681757265914227984403702515691075552461421981359962669637226333587053252425128694031750506621904493724419794871366207258436088116513837807951853747058875905582236726611507170380858553433680700275929878432387980143512845058608667561726214114297631726019073897610691045184005336986166212229974636334023492297798886535932867674244116259821286346996955095365716582723337101367875418828722277484876812597598938005694247464099170475932134492996745973355513966157875111907681090714649502402062082570875161125710678893599744516529154258619641399835131211930507191049571843955362830633726982196577314535540909170636900729158880427720279423881750523625308849597872857589053865151117967913915428067047346384886077361042405460886505087049257156795535964187394075n;
const N_l = B * 236355191836590457397707491022910920077690007721733330338027119354321014130713887009182961326485239425296264909051940092493306884885283249721243042844374432495212154376256255704392499907061598713115082261676556450782039923011861921655165914134767960755665563670370798875378900218318561480240024735641606347583528755087393634045956644805923288091725142248067220837025961244078715876523786344695823416683639002012451633906047638397197403905409522015193725898937598730345650412672234391333714897134540314304337598819941137004212969837553417522334010853366157237767030055113010264744763424957464660971206603399404618867176216106085285875258905821007250529534874002248908255254697187305996120779492757255664343016919286987561070488225208348034622802918227697885404751922095606879798735350964706901800351168890340918126570036749347997268612931506325334869121069024373856738416502624291739058166051131345043n + 3923872978875392000111875141632527216410897261165696298989939054430637372121627538808044328460843439381873828830692355876600534589995964874211618585373101677659095961011976257111308062277274873224922864779906035186405500051845829269216292776849709611151811179675197992280340245095926724209915458368624163616721749729870321246571501769327049132012107452150852115905983914621985830621491277318732358589462719898696619068082807873214891925905616632073026966415146146443994298591909898015093726049192926655329916823140563938132706110522481166889047047136581361830090537610569998843832977194060062062278190196274707971902471333894027996814434772214995303658815078200529624934453307145964428297659098393995055980681209177521332764054221962634372282438120428533486968756251019437139888030435988944223820286708876861467470570941662147553026029435532923355559851688810469551348423935146160537924798631750158n;


const sequence = [];
const pattern = [];

let N_i = N_0;
let P_i = N_0 % 2n === 0n ? 0 : 1 ;

while (true) {
  sequence.push(N_i);
  pattern.push(P_i);

  if (N_i < N_0) break;
  
  N_i = N_i % 2n === 0n ? N_i / 2n : ( N_i * 3n + 1n ) / 2n ;
  P_i = N_i % 2n === 0n ? 0 : 1 ;
}

//console.log(sequence);
//console.log(pattern);
console.log(pattern.length);

const fileName = `stat/pattern-${pattern.length - 1}.txt`;

import { appendFileSync } from 'fs';

for (let i = 0; i < pattern.length; i++) {
  appendFileSync(fileName, `${pattern[i]}`, 'utf8');
}

appendFileSync(fileName, `\n`, 'utf8');
appendFileSync(fileName, `N_0 = ${N_0}\n`, 'utf8');
appendFileSync(fileName, `N_i = ${N_i}\n`, 'utf8');

appendFileSync(fileName, `\n`, 'utf8');
appendFileSync(fileName, `N_0 - N_l = ${N_0 - N_l}\n`, 'utf8');
appendFileSync(fileName, `N_i - N_l = ${N_i - N_l}\n`, 'utf8');

/*
for (let i = 0; i < sequence.length; i++) {
  appendFileSync(fileName, `${sequence[i]}\n`, 'utf8');
}
*/